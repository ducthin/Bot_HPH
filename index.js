const { Client, GatewayIntentBits, EmbedBuilder, ActivityType, Collection } = require('discord.js');
const { joinVoiceChannel, createAudioPlayer, createAudioResource, AudioPlayerStatus, VoiceConnectionStatus, NoSubscriberBehavior } = require('@discordjs/voice');
const ytdl = require('@distube/ytdl-core');
const yts = require('yt-search');
require('dotenv').config();

// Danh s√°ch User Agents ƒë·ªÉ tr√°nh b·ªã ch·∫∑n
const USER_AGENTS = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0'
];

// H√†m l·∫•y random User Agent
function getRandomUserAgent() {
    return USER_AGENTS[Math.floor(Math.random() * USER_AGENTS.length)];
}

// H√†m delay
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// H√†m th·ª≠ l·∫°i v·ªõi delay
async function retryWithDelay(fn, maxRetries = 3, delayMs = 2000) {
    for (let i = 0; i < maxRetries; i++) {
        try {
            return await fn();
        } catch (error) {
            if (i === maxRetries - 1) throw error;
            
            console.log(`Th·ª≠ l·∫ßn ${i + 1} th·∫•t b·∫°i, ƒë·ª£i ${delayMs}ms r·ªìi th·ª≠ l·∫°i...`);
            await delay(delayMs * (i + 1)); // TƒÉng delay m·ªói l·∫ßn th·ª≠
        }
    }
}

// Kh·ªüi t·∫°o bot v·ªõi c√°c intents c·∫ßn thi·∫øt
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildVoiceStates,
    ]
});

// H√†m ki·ªÉm tra URL YouTube
function isValidYoutubeUrl(url) {
    if (!url || typeof url !== 'string') return false;
    
    try {
        // N·∫øu ƒë√£ l√† ID 11 k√Ω t·ª± th√¨ coi l√† h·ª£p l·ªá
        if (/^[a-zA-Z0-9_-]{11}$/.test(url)) {
            return true;
        }
        
        // Ki·ªÉm tra c√°c ƒë·ªãnh d·∫°ng URL YouTube ph·ªï bi·∫øn
        const patterns = [
            /^(https?:\/\/)?(www\.)?(youtube\.com|youtu\.?be)\/.+$/,
            /^(https?:\/\/)?(www\.)?youtube\.com\/watch\?v=[a-zA-Z0-9_-]{11}.*$/,
            /^(https?:\/\/)?(www\.)?youtu\.be\/[a-zA-Z0-9_-]{11}.*$/,
            /^(https?:\/\/)?(www\.)?youtube\.com\/embed\/[a-zA-Z0-9_-]{11}.*$/,
            /^(https?:\/\/)?(www\.)?youtube\.com\/v\/[a-zA-Z0-9_-]{11}.*$/
        ];
        
        return patterns.some(pattern => pattern.test(url));
    } catch (error) {
        console.error('L·ªói khi ki·ªÉm tra URL YouTube:', error);
        return false;
    }
}

// Thi·∫øt l·∫≠p prefix t·ª´ file .env
const PREFIX = process.env.PREFIX || '!';

// Qu·∫£n l√Ω queue nh·∫°c cho m·ªói server
const queues = new Map();

// Kh·ªüi t·∫°o bot
client.on('ready', () => {
    console.log(`üéµ Happy House Bot ƒë√£ s·∫µn s√†ng! ƒê√£ ƒëƒÉng nh·∫≠p v·ªõi t√™n ${client.user.tag}`);
    
    // Set bot status
    client.user.setActivity('!help | üéµ Happy House', { type: ActivityType.Listening });
});

// X·ª≠ l√Ω tin nh·∫Øn
client.on('messageCreate', async message => {
    // B·ªè qua tin nh·∫Øn t·ª´ bot ho·∫∑c kh√¥ng b·∫Øt ƒë·∫ßu b·∫±ng prefix
    if (message.author.bot || !message.content.startsWith(PREFIX)) return;

    // Ph√¢n t√≠ch l·ªánh v√† tham s·ªë
    const args = message.content.slice(PREFIX.length).trim().split(/ +/);
    const command = args.shift().toLowerCase();

    // X·ª≠ l√Ω c√°c l·ªánh
    try {
        switch (command) {
            case 'help':
                sendHelp(message);
                break;
            case 'play':
            case 'p':
                play(message, args);
                break;
            case 'skip':
            case 's':
                skip(message);
                break;
            case 'stop':
            case 'st':
                stop(message);
                break;
            case 'pause':
            case 'pa':
                pause(message);
                break;
            case 'resume':
            case 'r':
                resume(message);
                break;
            case 'queue':
            case 'q':
                showQueue(message);
                break;
            case 'nowplaying':
            case 'np':
                nowPlaying(message);
                break;
            case 'volume':
                setVolume(message, args);
                break;
        }
    } catch (error) {
        console.error(`L·ªói khi x·ª≠ l√Ω l·ªánh ${command}:`, error);
        message.reply('‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω l·ªánh. Vui l√≤ng th·ª≠ l·∫°i sau!');
    }
});

// Hi·ªÉn th·ªã tr·ª£ gi√∫p
function sendHelp(message) {
    const helpEmbed = new EmbedBuilder()
        .setColor('#FF69B4')
        .setTitle('üéµ Happy House - Tr·ª£ gi√∫p')
        .setDescription('Danh s√°ch c√°c l·ªánh c√≥ s·∫µn:')
        .addFields(
            { name: `${PREFIX}play <t√™n b√†i h√°t ho·∫∑c URL>`, value: 'Ph√°t nh·∫°c t·ª´ YouTube' },
            { name: `${PREFIX}pause`, value: 'T·∫°m d·ª´ng nh·∫°c' },
            { name: `${PREFIX}resume`, value: 'Ti·∫øp t·ª•c ph√°t nh·∫°c' },
            { name: `${PREFIX}skip`, value: 'B·ªè qua b√†i hi·ªán t·∫°i' },
            { name: `${PREFIX}stop`, value: 'D·ª´ng nh·∫°c v√† r·ªùi voice channel' },
            { name: `${PREFIX}queue`, value: 'Hi·ªÉn th·ªã danh s√°ch nh·∫°c ch·ªù' },
            { name: `${PREFIX}nowplaying`, value: 'Hi·ªÉn th·ªã b√†i ƒëang ph√°t' },
            { name: `${PREFIX}volume <0-100>`, value: 'ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng' }
        )
        .setFooter({ text: 'üéµ Happy House - Mang √¢m nh·∫°c ƒë·∫øn m·ªçi ng∆∞·ªùi!' });

    message.channel.send({ embeds: [helpEmbed] });
}

// Tr√≠ch xu·∫•t Video ID t·ª´ URL YouTube
function extractVideoID(url) {
    if (!url || typeof url !== 'string') return null;
    
    try {
        // Tr∆∞·ªùng h·ª£p n·∫øu ƒë√£ l√† video ID
        if (/^[a-zA-Z0-9_-]{11}$/.test(url)) {
            return url;
        }
        
        // ƒê·ªãnh d·∫°ng youtu.be/VIDEO_ID
        if (url.includes('youtu.be/')) {
            const parts = url.split('youtu.be/');
            if (parts.length > 1 && parts[1]) {
                return parts[1].split(/[?&#]/)[0];
            }
        } 
        // ƒê·ªãnh d·∫°ng youtube.com/watch?v=VIDEO_ID
        else if (url.includes('youtube.com/watch')) {
            const match = url.match(/[?&]v=([a-zA-Z0-9_-]{11})/);
            return match && match[1] ? match[1] : null;
        }
        // ƒê·ªãnh d·∫°ng youtube.com/v/VIDEO_ID
        else if (url.includes('youtube.com/v/')) {
            const parts = url.split('youtube.com/v/');
            if (parts.length > 1 && parts[1]) {
                return parts[1].split(/[?&#]/)[0];
            }
        }
        // ƒê·ªãnh d·∫°ng youtube.com/embed/VIDEO_ID
        else if (url.includes('youtube.com/embed/')) {
            const parts = url.split('youtube.com/embed/');
            if (parts.length > 1 && parts[1]) {
                return parts[1].split(/[?&#]/)[0];
            }
        }
        
        // Tr∆∞·ªùng h·ª£p kh√°c, th·ª≠ regex to√†n di·ªán
        const generalMatch = url.match(/(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))([^?&\/]+)/);
        if (generalMatch && generalMatch[1]) {
            return generalMatch[1];
        }
    } catch (error) {
        console.error('L·ªói khi tr√≠ch xu·∫•t video ID:', error);
    }
    
    return null;
}

// H√†m ki·ªÉm tra URL YouTube
function isValidYoutubeUrl(url) {
    if (!url || typeof url !== 'string') return false;
    
    try {
        // N·∫øu ƒë√£ l√† ID 11 k√Ω t·ª± th√¨ coi l√† h·ª£p l·ªá
        if (/^[a-zA-Z0-9_-]{11}$/.test(url)) {
            return true;
        }
        
        // Ki·ªÉm tra c√°c ƒë·ªãnh d·∫°ng URL YouTube ph·ªï bi·∫øn
        const patterns = [
            /^(https?:\/\/)?(www\.)?(youtube\.com|youtu\.?be)\/.+$/,
            /^(https?:\/\/)?(www\.)?youtube\.com\/watch\?v=[a-zA-Z0-9_-]{11}.*$/,
            /^(https?:\/\/)?(www\.)?youtu\.be\/[a-zA-Z0-9_-]{11}.*$/,
            /^(https?:\/\/)?(www\.)?youtube\.com\/embed\/[a-zA-Z0-9_-]{11}.*$/,
            /^(https?:\/\/)?(www\.)?youtube\.com\/v\/[a-zA-Z0-9_-]{11}.*$/
        ];
        
        return patterns.some(pattern => pattern.test(url));
    } catch (error) {
        console.error('L·ªói khi ki·ªÉm tra URL YouTube:', error);
        return false;
    }
}

// H√†m ph√°t nh·∫°c
async function play(message, args) {
    // Ki·ªÉm tra tham s·ªë
    if (args.length === 0) {
        return message.reply('‚ùå Vui l√≤ng cung c·∫•p t√™n b√†i h√°t ho·∫∑c URL YouTube!');
    }

    // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ trong voice channel kh√¥ng
    const voiceChannel = message.member.voice.channel;
    if (!voiceChannel) {
        return message.reply('‚ùå B·∫°n c·∫ßn v√†o voice channel tr∆∞·ªõc khi ph√°t nh·∫°c!');
    }

    // L·∫•y ho·∫∑c t·∫°o queue cho server
    let serverQueue = queues.get(message.guild.id);
    if (!serverQueue) {
        serverQueue = {
            textChannel: message.channel,
            voiceChannel: voiceChannel,
            connection: null,
            player: createAudioPlayer({
                behaviors: {
                    noSubscriber: NoSubscriberBehavior.Pause
                }
            }),
            songs: [],
            volume: 50,
            playing: true
        };
        queues.set(message.guild.id, serverQueue);
    }

    try {
        let song;
        const query = args.join(' ');
        
        // Hi·ªÉn th·ªã th√¥ng b√°o t√¨m ki·∫øm
        const searchMessage = await message.channel.send('üîç ƒêang t√¨m ki·∫øm...');
        
        try {
            // Ki·ªÉm tra xem ƒë·∫ßu v√†o c√≥ ph·∫£i l√† URL YouTube kh√¥ng
            const isUrl = isValidYoutubeUrl(query);
            
            if (isUrl) {
                console.log('ƒê·∫ßu v√†o l√† URL YouTube:', query);
                
                // L·∫•y th√¥ng tin video t·ª´ URL
                const videoId = extractVideoID(query);
                if (!videoId) {
                    searchMessage.delete().catch(() => {});
                    return message.reply('‚ùå URL YouTube kh√¥ng h·ª£p l·ªá!');
                }
                
                // Chu·∫©n h√≥a URL
                const standardUrl = `https://www.youtube.com/watch?v=${videoId}`;
                
                try {
                    // L·∫•y th√¥ng tin video t·ª´ URL
                    const videoInfo = await yts({ videoId });
                    
                    song = {
                        title: videoInfo.title,
                        url: standardUrl,
                        duration: videoInfo.duration ? videoInfo.duration.timestamp : '0:00',
                        thumbnail: videoInfo.thumbnail,
                        requestedBy: message.author.tag
                    };
                } catch (videoInfoError) {
                    console.error('L·ªói khi l·∫•y th√¥ng tin video t·ª´ URL:', videoInfoError);
                    
                    // Th·ª≠ t√¨m ki·∫øm theo ID n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin tr·ª±c ti·∫øp
                    const searchResults = await yts(videoId);
                    if (!searchResults.videos.length) {
                        searchMessage.delete().catch(() => {});
                        return message.reply('‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin video t·ª´ URL n√†y!');
                    }
                    
                    const video = searchResults.videos[0];
                    song = {
                        title: video.title,
                        url: standardUrl,
                        duration: video.duration.timestamp || '0:00',
                        thumbnail: video.thumbnail,
                        requestedBy: message.author.tag
                    };
                }
            } else {
                console.log('ƒê·∫ßu v√†o l√† t·ª´ kh√≥a t√¨m ki·∫øm:', query);
                
                // T√¨m ki·∫øm video
                const searchResults = await yts(query);
                if (!searchResults.videos.length) {
                    searchMessage.delete().catch(() => {});
                    return message.reply('‚ùå Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o ph√π h·ª£p!');
                }
                
                const video = searchResults.videos[0];
                
                // T·∫°o th√¥ng tin b√†i h√°t
                song = {
                    title: video.title,
                    url: video.url,
                    duration: video.duration.timestamp || '0:00',
                    thumbnail: video.thumbnail,
                    requestedBy: message.author.tag
                };
            }
            
            searchMessage.delete().catch(() => {});
        } catch (error) {
            console.error('L·ªói khi t√¨m ki·∫øm b√†i h√°t:', error);
            searchMessage.delete().catch(() => {});
            return message.reply('‚ùå ƒê√£ x·∫£y ra l·ªói khi t√¨m ki·∫øm b√†i h√°t. Vui l√≤ng th·ª≠ l·∫°i sau!');
        }

        // Th√™m b√†i h√°t v√†o queue
        serverQueue.songs.push(song);
        
        // Th√¥ng b√°o ƒë√£ th√™m b√†i h√°t
        const addedEmbed = new EmbedBuilder()
            .setColor('#FF69B4')
            .setTitle('üéµ ƒê√£ th√™m v√†o h√†ng ƒë·ª£i')
            .setDescription(`[${song.title}](${song.url})`)
            .setThumbnail(song.thumbnail || 'https://i.imgur.com/4M7IWwP.png')
            .addFields(
                { name: '‚è±Ô∏è Th·ªùi l∆∞·ª£ng', value: song.duration, inline: true },
                { name: 'üë§ Y√™u c·∫ßu b·ªüi', value: song.requestedBy, inline: true }
            )
            .setFooter({ text: 'üéµ Happy House - Mang √¢m nh·∫°c ƒë·∫øn m·ªçi ng∆∞·ªùi!' });
        
        message.channel.send({ embeds: [addedEmbed] });        // K·∫øt n·ªëi v√† ph√°t nh·∫°c n·∫øu ch∆∞a c√≥ k·∫øt n·ªëi
        if (!serverQueue.connection) {
            try {
                // T·∫°o k·∫øt n·ªëi voice v·ªõi timeout v√† error handling
                const connection = joinVoiceChannel({
                    channelId: voiceChannel.id,
                    guildId: message.guild.id,
                    adapterCreator: message.guild.voiceAdapterCreator,
                    selfDeaf: true, // Bot t·ª± l√†m ƒëi·∫øc ƒë·ªÉ ti·∫øt ki·ªám bƒÉng th√¥ng
                    selfMute: false
                });
                
                serverQueue.connection = connection;
                
                // X·ª≠ l√Ω c√°c s·ª± ki·ªán connection
                connection.on(VoiceConnectionStatus.Ready, () => {
                    console.log('Voice connection ready!');
                });
                
                connection.on(VoiceConnectionStatus.Disconnected, () => {
                    console.log('Voice connection disconnected');
                    queues.delete(message.guild.id);
                });
                
                connection.on(VoiceConnectionStatus.Destroyed, () => {
                    console.log('Voice connection destroyed');
                    queues.delete(message.guild.id);
                });
                
                connection.on('error', (error) => {
                    console.error('Voice connection error:', error);
                    if (error.message.includes('IP discovery')) {
                        console.log('Retrying voice connection due to IP discovery error...');
                        // Th·ª≠ k·∫øt n·ªëi l·∫°i sau 2 gi√¢y
                        setTimeout(() => {
                            try {
                                connection.rejoin();
                            } catch (rejoinError) {
                                console.error('Failed to rejoin:', rejoinError);
                                queues.delete(message.guild.id);
                            }
                        }, 2000);
                    }
                });
                
                // ƒê·ª£i connection s·∫µn s√†ng tr∆∞·ªõc khi ph√°t nh·∫°c
                await new Promise((resolve, reject) => {
                    const timeout = setTimeout(() => {
                        reject(new Error('Voice connection timeout'));
                    }, 15000); // 15 gi√¢y timeout
                    
                    connection.on(VoiceConnectionStatus.Ready, () => {
                        clearTimeout(timeout);
                        resolve();
                    });
                    
                    if (connection.state.status === VoiceConnectionStatus.Ready) {
                        clearTimeout(timeout);
                        resolve();
                    }
                });
                
                console.log('Voice connection established, starting playback...');
                
                // B·∫Øt ƒë·∫ßu ph√°t nh·∫°c
                await playSong(message.guild.id, serverQueue.songs[0]);
                
            } catch (err) {
                console.error('L·ªói khi k·∫øt n·ªëi voice channel:', err);
                queues.delete(message.guild.id);
                return message.channel.send('‚ùå ƒê√£ x·∫£y ra l·ªói khi k·∫øt n·ªëi voice channel! Vui l√≤ng th·ª≠ l·∫°i sau v√†i gi√¢y.');
            }
        }
    } catch (error) {
        console.error('L·ªói khi ph√°t nh·∫°c:', error);
        message.channel.send('‚ùå ƒê√£ x·∫£y ra l·ªói khi ph√°t nh·∫°c. Vui l√≤ng th·ª≠ l·∫°i sau!');
    }
}

// H√†m ph√°t b√†i h√°t
async function playSong(guildId, song) {
    const serverQueue = queues.get(guildId);
    
    if (!song) {
        if (serverQueue && serverQueue.connection) {
            serverQueue.connection.destroy();
        }
        queues.delete(guildId);
        return;
    }

    try {
        console.log('ƒêang th·ª≠ ph√°t b√†i h√°t:', song.title);
        console.log('URL b√†i h√°t:', song.url);
        
        // X√°c th·ª±c URL ho·∫∑c t√¨m URL t·ª´ t√™n b√†i h√°t
        let videoUrl = song.url;
        let videoId = extractVideoID(song.url);
        
        // N·∫øu kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c ID t·ª´ URL, th·ª≠ t√¨m ki·∫øm theo t√™n
        if (!videoId) {
            console.log('Kh√¥ng t√¨m th·∫•y ID t·ª´ URL, th·ª≠ t√¨m ki·∫øm theo t√™n:', song.title);
            try {
                const searchResult = await yts(song.title);
                if (searchResult.videos.length > 0) {
                    videoUrl = searchResult.videos[0].url;
                    videoId = extractVideoID(videoUrl);
                    console.log('ƒê√£ t√¨m URL m·ªõi t·ª´ t√™n b√†i h√°t:', videoUrl);
                    
                    // C·∫≠p nh·∫≠t URL trong danh s√°ch ph√°t
                    song.url = videoUrl;
                } else {
                    throw new Error('Kh√¥ng t√¨m th·∫•y video ph√π h·ª£p');
                }
            } catch (searchError) {
                console.error('L·ªói khi t√¨m ki·∫øm b√†i h√°t:', searchError);
                serverQueue.textChannel.send(`‚ùå Kh√¥ng th·ªÉ t√¨m th·∫•y b√†i h√°t: ${song.title}`);
                serverQueue.songs.shift();
                return playSong(guildId, serverQueue.songs[0]);
            }
        }
        
        // X√¢y d·ª±ng URL ch√≠nh x√°c t·ª´ ID
        if (videoId) {
            try {
                const standardYoutubeUrl = `https://www.youtube.com/watch?v=${videoId}`;
                console.log('URL chu·∫©n h√≥a:', standardYoutubeUrl);                // S·ª≠ d·ª•ng @distube/ytdl-core ƒë·ªÉ stream video t·ª´ YouTube v·ªõi retry
                try {
                    // Validate URL first
                    if (!ytdl.validateURL(standardYoutubeUrl)) {
                        throw new Error('URL YouTube kh√¥ng h·ª£p l·ªá');
                    }
                    
                    console.log('ƒêang t·∫°o stream v·ªõi @distube/ytdl-core (c√≥ retry)...');
                    
                    // T·∫°o stream v·ªõi retry mechanism
                    const stream = await retryWithDelay(async () => {
                        console.log('ƒêang th·ª≠ t·∫°o stream...');
                        return ytdl(standardYoutubeUrl, {
                            filter: 'audioonly',
                            quality: 'lowestaudio', // D√πng quality th·∫•p h∆°n ƒë·ªÉ gi·∫£m t·∫£i
                            highWaterMark: 1 << 20, // Gi·∫£m buffer xu·ªëng 1MB
                            requestOptions: {
                                headers: {
                                    'User-Agent': getRandomUserAgent(),
                                    'Accept': '*/*',
                                    'Accept-Encoding': 'gzip, deflate',
                                    'Accept-Language': 'en-US,en;q=0.9',
                                    'Connection': 'keep-alive'
                                }
                            }
                        });
                    }, 3, 3000); // 3 l·∫ßn th·ª≠, delay 3 gi√¢y
                    
                    console.log('Stream ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng sau retry!');
                    
                    // X·ª≠ l√Ω l·ªói stream
                    stream.on('error', (error) => {
                        console.error('Stream error:', error);
                        if (error.statusCode === 429) {
                            console.log('G·∫∑p l·ªói 429, th·ª≠ fallback search...');
                        }
                        serverQueue.player.emit('error', error);
                    });
                    
                    // T·∫°o resource
                    const resource = createAudioResource(stream, {
                        inputType: 'arbitrary',
                        inlineVolume: true
                    });
                    
                    // Thi·∫øt l·∫≠p √¢m l∆∞·ª£ng
                    if (resource.volume) {
                        resource.volume.setVolume(serverQueue.volume / 100);
                    }
                    
                    // Ph√°t nh·∫°c
                    serverQueue.player.play(resource);
                    
                    // X·ª≠ l√Ω c√°c s·ª± ki·ªán player
                    serverQueue.player.once(AudioPlayerStatus.Idle, () => {
                        console.log('B√†i h√°t ƒë√£ k·∫øt th√∫c, ph√°t b√†i ti·∫øp theo...');
                        serverQueue.songs.shift();
                        playSong(guildId, serverQueue.songs[0]);
                    });
                    
                    serverQueue.player.once('error', (error) => {
                        console.error('L·ªói player:', error);
                        if (serverQueue.textChannel) {
                            serverQueue.textChannel.send('‚ùå ƒê√£ x·∫£y ra l·ªói khi ph√°t nh·∫°c!');
                        }
                        serverQueue.songs.shift();
                        playSong(guildId, serverQueue.songs[0]);
                    });
                    
                    // K·∫øt n·ªëi player v·ªõi connection
                    serverQueue.connection.subscribe(serverQueue.player);
                    
                    // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang ph√°t
                    const playingEmbed = new EmbedBuilder()
                        .setColor('#FF69B4')
                        .setTitle('üéµ ƒêang ph√°t')
                        .setDescription(`[${song.title}](${song.url})`)
                        .setThumbnail(song.thumbnail || 'https://i.imgur.com/4M7IWwP.png')
                        .addFields(
                            { name: '‚è±Ô∏è Th·ªùi l∆∞·ª£ng', value: song.duration, inline: true },
                            { name: 'üë§ Y√™u c·∫ßu b·ªüi', value: song.requestedBy, inline: true }
                        )
                        .setFooter({ text: 'üéµ Happy House - Mang √¢m nh·∫°c ƒë·∫øn m·ªçi ng∆∞·ªùi!' });
                    
                    serverQueue.textChannel.send({ embeds: [playingEmbed] });
                    
                } catch (streamError) {
                    console.error('L·ªói khi t·∫°o stream:', streamError);
                      // Th·ª≠ ph∆∞∆°ng ph√°p thay th·∫ø v·ªõi delay
                    try {
                        console.log('Th·ª≠ ph∆∞∆°ng ph√°p thay th·∫ø sau khi g·∫∑p l·ªói 429...');
                        
                        // Delay tr∆∞·ªõc khi th·ª≠ fallback
                        await delay(5000); // ƒê·ª£i 5 gi√¢y
                        
                        // T√¨m ki·∫øm video b·∫±ng t√™n
                        const results = await yts(song.title);
                        if (!results.videos.length) {
                            throw new Error('Kh√¥ng t√¨m th·∫•y video thay th·∫ø');
                        }
                        
                        // Th·ª≠ nhi·ªÅu video thay th·∫ø
                        let successfulStream = null;
                        for (let i = 0; i < Math.min(3, results.videos.length); i++) {
                            const altVideo = results.videos[i];
                            console.log(`Th·ª≠ video thay th·∫ø ${i + 1}: ${altVideo.url}`);
                            
                            try {
                                await delay(2000); // Delay gi·ªØa c√°c th·ª≠ nghi·ªám
                                
                                const stream = await retryWithDelay(async () => {
                                    return ytdl(altVideo.url, {
                                        filter: 'audioonly',
                                        quality: 'lowestaudio', // D√πng quality th·∫•p
                                        highWaterMark: 1 << 19, // Buffer nh·ªè h∆°n (512KB)
                                        requestOptions: {
                                            headers: {
                                                'User-Agent': getRandomUserAgent(),
                                                'Accept': '*/*',
                                                'Accept-Language': 'en-US,en;q=0.9'
                                            }
                                        }
                                    });
                                }, 2, 4000); // 2 l·∫ßn th·ª≠, delay 4 gi√¢y
                                
                                successfulStream = stream;
                                console.log(`T·∫°o stream th√†nh c√¥ng v·ªõi video thay th·∫ø ${i + 1}!`);
                                break;
                            } catch (altError) {
                                console.log(`Video thay th·∫ø ${i + 1} th·∫•t b·∫°i:`, altError.message);
                                continue;
                            }
                        }
                        
                        if (!successfulStream) {
                            throw new Error('Kh√¥ng th·ªÉ t·∫°o stream t·ª´ b·∫•t k·ª≥ video thay th·∫ø n√†o');
                        }
                        
                        successfulStream.on('error', (error) => {
                            console.error('Alternative stream error:', error);
                            throw error;
                        });
                        
                        const resource = createAudioResource(successfulStream, {
                            inputType: 'arbitrary',
                            inlineVolume: true
                        });
                        
                        if (resource.volume) {
                            resource.volume.setVolume(serverQueue.volume / 100);
                        }
                        
                        serverQueue.player.play(resource);
                        serverQueue.connection.subscribe(serverQueue.player);
                        
                        const playingEmbed = new EmbedBuilder()
                            .setColor('#FF69B4')
                            .setTitle('üéµ ƒêang ph√°t (ph∆∞∆°ng ph√°p thay th·∫ø)')
                            .setDescription(`[${altVideo.title}](${altVideo.url})`)
                            .setThumbnail(altVideo.thumbnail || 'https://i.imgur.com/4M7IWwP.png')
                            .addFields(
                                { name: '‚è±Ô∏è Th·ªùi l∆∞·ª£ng', value: altVideo.duration.timestamp || '0:00', inline: true },
                                { name: 'üë§ Y√™u c·∫ßu b·ªüi', value: song.requestedBy, inline: true }
                            )
                            .setFooter({ text: 'üéµ Happy House - Mang √¢m nh·∫°c ƒë·∫øn m·ªçi ng∆∞·ªùi!' });
                        
                        serverQueue.textChannel.send({ embeds: [playingEmbed] });                    } catch (altError) {
                        console.error('Ph∆∞∆°ng ph√°p thay th·∫ø c≈©ng th·∫•t b·∫°i:', altError);
                        
                        let errorMessage = `‚ùå Kh√¥ng th·ªÉ ph√°t b√†i h√°t: ${song.title}`;
                        if (altError.statusCode === 429 || streamError.statusCode === 429) {
                            errorMessage += '\n‚ö†Ô∏è YouTube ƒëang gi·ªõi h·∫°n requests. Vui l√≤ng th·ª≠ l·∫°i sau v√†i ph√∫t.';
                        }
                        
                        serverQueue.textChannel.send(errorMessage);
                        serverQueue.songs.shift();
                        playSong(guildId, serverQueue.songs[0]);
                    }
                }
            } catch (streamError) {
                console.error('L·ªói khi t·∫°o stream:', streamError);
                serverQueue.textChannel.send(`‚ùå Kh√¥ng th·ªÉ ph√°t b√†i h√°t: ${song.title}. L·ªói: ${streamError.message}`);
                serverQueue.songs.shift();
                playSong(guildId, serverQueue.songs[0]);
            }
        } else {
            // Kh√¥ng t√¨m th·∫•y video ID h·ª£p l·ªá
            console.error('Kh√¥ng th·ªÉ tr√≠ch xu·∫•t video ID h·ª£p l·ªá');
            serverQueue.textChannel.send(`‚ùå Kh√¥ng th·ªÉ ph√°t b√†i h√°t: ${song.title} (ID kh√¥ng h·ª£p l·ªá)`);
            serverQueue.songs.shift();
            playSong(guildId, serverQueue.songs[0]);
        }
        
    } catch (error) {
        console.error('L·ªói khi ph√°t b√†i h√°t:', error);
        if (serverQueue && serverQueue.textChannel) {
            serverQueue.textChannel.send(`‚ùå ƒê√£ x·∫£y ra l·ªói: ${error.message}`);
        }
        
        if (serverQueue && serverQueue.songs.length > 0) {
            serverQueue.songs.shift();
            playSong(guildId, serverQueue.songs[0]);
        }
    }
}

// H√†m b·ªè qua b√†i h√°t
function skip(message) {
    const serverQueue = queues.get(message.guild.id);
    if (!serverQueue) {
        return message.channel.send('‚ùå Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t!');
    }
    
    if (!message.member.voice.channel) {
        return message.channel.send('‚ùå B·∫°n c·∫ßn v√†o voice channel ƒë·ªÉ b·ªè qua b√†i h√°t!');
    }
    
    message.channel.send('‚è≠Ô∏è ƒê√£ b·ªè qua b√†i h√°t hi·ªán t·∫°i!');
    serverQueue.player.stop();
}

// H√†m d·ª´ng nh·∫°c v√† r·ªùi channel
function stop(message) {
    const serverQueue = queues.get(message.guild.id);
    if (!serverQueue) {
        return message.channel.send('‚ùå Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t!');
    }
    
    if (!message.member.voice.channel) {
        return message.channel.send('‚ùå B·∫°n c·∫ßn v√†o voice channel ƒë·ªÉ d·ª´ng nh·∫°c!');
    }
    
    serverQueue.songs = [];
    serverQueue.player.stop();
    if (serverQueue.connection) {
        serverQueue.connection.destroy();
    }
    queues.delete(message.guild.id);
    
    message.channel.send('üõë ƒê√£ d·ª´ng ph√°t nh·∫°c v√† r·ªùi kh·ªèi voice channel!');
}

// H√†m t·∫°m d·ª´ng nh·∫°c
function pause(message) {
    const serverQueue = queues.get(message.guild.id);
    if (!serverQueue) {
        return message.channel.send('‚ùå Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t!');
    }
    
    if (!message.member.voice.channel) {
        return message.channel.send('‚ùå B·∫°n c·∫ßn v√†o voice channel ƒë·ªÉ t·∫°m d·ª´ng nh·∫°c!');
    }
    
    if (serverQueue.playing) {
        serverQueue.playing = false;
        serverQueue.player.pause();
        message.channel.send('‚è∏Ô∏è ƒê√£ t·∫°m d·ª´ng ph√°t nh·∫°c!');
    } else {
        message.channel.send('‚ùå Nh·∫°c ƒë√£ ƒë∆∞·ª£c t·∫°m d·ª´ng r·ªìi!');
    }
}

// H√†m ti·∫øp t·ª•c ph√°t nh·∫°c
function resume(message) {
    const serverQueue = queues.get(message.guild.id);
    if (!serverQueue) {
        return message.channel.send('‚ùå Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t!');
    }
    
    if (!message.member.voice.channel) {
        return message.channel.send('‚ùå B·∫°n c·∫ßn v√†o voice channel ƒë·ªÉ ti·∫øp t·ª•c ph√°t nh·∫°c!');
    }
    
    if (!serverQueue.playing) {
        serverQueue.playing = true;
        serverQueue.player.unpause();
        message.channel.send('‚ñ∂Ô∏è ƒê√£ ti·∫øp t·ª•c ph√°t nh·∫°c!');
    } else {
        message.channel.send('‚ùå Nh·∫°c ƒëang ƒë∆∞·ª£c ph√°t r·ªìi!');
    }
}

// H√†m hi·ªÉn th·ªã queue
function showQueue(message) {
    const serverQueue = queues.get(message.guild.id);
    if (!serverQueue || !serverQueue.songs.length) {
        return message.channel.send('‚ùå Danh s√°ch ph√°t tr·ªëng!');
    }
    
    // T·∫°o danh s√°ch b√†i h√°t
    let queueList = serverQueue.songs.map((song, index) => {
        return `${index + 1}. [${song.title}](${song.url}) | ${song.duration} | ${song.requestedBy}`;
    }).join('\n');
    
    // Gi·ªõi h·∫°n ƒë·ªô d√†i danh s√°ch
    if (queueList.length > 4096) {
        queueList = queueList.substring(0, 4093) + '...';
    }
    
    const queueEmbed = new EmbedBuilder()
        .setColor('#FF69B4')
        .setTitle('üéµ Danh s√°ch ph√°t - Happy House')
        .setDescription(queueList)
        .setFooter({ text: `${serverQueue.songs.length} b√†i h√°t trong danh s√°ch ‚Ä¢ Happy House Bot` });
    
    message.channel.send({ embeds: [queueEmbed] });
}

// H√†m hi·ªÉn th·ªã b√†i ƒëang ph√°t
function nowPlaying(message) {
    const serverQueue = queues.get(message.guild.id);
    if (!serverQueue || !serverQueue.songs.length) {
        return message.channel.send('‚ùå Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t!');
    }
    
    const song = serverQueue.songs[0];
    
    const npEmbed = new EmbedBuilder()
        .setColor('#FF69B4')
        .setTitle('üéµ ƒêang ph√°t')
        .setDescription(`[${song.title}](${song.url})`)
        .setThumbnail(song.thumbnail || 'https://i.imgur.com/4M7IWwP.png')
        .addFields(
            { name: '‚è±Ô∏è Th·ªùi l∆∞·ª£ng', value: song.duration, inline: true },
            { name: 'üë§ Y√™u c·∫ßu b·ªüi', value: song.requestedBy, inline: true },
            { name: 'üîä √Çm l∆∞·ª£ng', value: `${serverQueue.volume}%`, inline: true }
        )
        .setFooter({ text: 'üéµ Happy House - Mang √¢m nh·∫°c ƒë·∫øn m·ªçi ng∆∞·ªùi!' });
    
    message.channel.send({ embeds: [npEmbed] });
}

// H√†m thi·∫øt l·∫≠p √¢m l∆∞·ª£ng
function setVolume(message, args) {
    const serverQueue = queues.get(message.guild.id);
    if (!serverQueue) {
        return message.channel.send('‚ùå Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t!');
    }
    
    if (!message.member.voice.channel) {
        return message.channel.send('‚ùå B·∫°n c·∫ßn v√†o voice channel ƒë·ªÉ ƒëi·ªÅu ch·ªânh √¢m l∆∞·ª£ng!');
    }
    
    if (!args.length) {
        return message.channel.send(`üîä √Çm l∆∞·ª£ng hi·ªán t·∫°i: ${serverQueue.volume}%`);
    }
    
    const volume = parseInt(args[0]);
    if (isNaN(volume) || volume < 0 || volume > 100) {
        return message.channel.send('‚ùå Vui l√≤ng nh·∫≠p √¢m l∆∞·ª£ng t·ª´ 0 ƒë·∫øn 100!');
    }
    
    serverQueue.volume = volume;
    
    // ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng c·ªßa resource hi·ªán t·∫°i
    try {
        const resource = serverQueue.player._state.resource;
        if (resource && resource.volume) {
            resource.volume.setVolume(volume / 100);
        }
    } catch (error) {
        console.error('L·ªói khi ƒëi·ªÅu ch·ªânh √¢m l∆∞·ª£ng:', error);
    }
    
    message.channel.send(`üîä ƒê√£ ƒë·∫∑t √¢m l∆∞·ª£ng th√†nh ${volume}%`);
}

// H√†m ƒë·ªãnh d·∫°ng th·ªùi gian
function formatDuration(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    
    if (hours > 0) {
        return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    } else {
        return `${minutes}:${secs.toString().padStart(2, '0')}`;
    }
}

// ƒêƒÉng nh·∫≠p bot
console.log('ƒêang kh·ªüi ƒë·ªông Happy House Bot...');

client.login(process.env.DISCORD_TOKEN)
    .then(() => console.log('ƒêƒÉng nh·∫≠p th√†nh c√¥ng!'))
    .catch(error => {
        console.error('L·ªói khi ƒëƒÉng nh·∫≠p:', error);
    });
